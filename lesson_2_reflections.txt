What happens when you initialize a repository? Why do you need to do it?
A hidden folder is created that stores metadata concerning the main folder (repository) and git information
Initialization ensures git knows the current folder is a repository and thus one can track changes made to the files
How can you use the staging area to make sure you have one commit per logical change?
You are able to ensure that all the commits being done involve only the files you're concerned with
You are also able to see the changes between files in the working dir and S.area and between S.area and the most recent commit
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches help a developer make experimental changes incrementally by using a branch different from the main (master) branch thus not affecting the 
development or current functionality of the main one.
How do the diagrams help you visualize the branch structure?
The tree structure helps illustrate and conceptualize how branches work
It helps determine what set of commits are being tracked by git log from the HEAD
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches consolidates the commits and lists them by date/time when git log command is executed.
The diagram is represented the way it is to help visualize at which point the two branches were combined.
What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Automatic merging speeds up the process of getting features in one branch working in the subject branch.
However, this may lead to some features being added that the subject branch's developer (may be experimental) did not want to include.
Manual merging gives the developer more control over which code they should include in the final version.
However, this would consume a lot of time.
